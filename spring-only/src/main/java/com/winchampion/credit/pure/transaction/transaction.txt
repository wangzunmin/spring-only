事务:
	事务指的是逻辑上的一组操作，这组操作要么全部成功，要么全部失败。
事务的特性：
	原子性
	    原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。
	一致性
	    一致性指事务前后数据的完整性必须保持一致。
	隔离性
	    隔离性指多个用户并发访问数据库时，一个用户的事务不能被其他用户的事务所干扰，多个并发事务之前要相互隔离。
	持久性
	    持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，即使数据库发生故障也不应该对其有任何影响。
	    
spring中事务管理api接口：
	PlatformTransactionManager 事务管理器
	TransactionDefinition 事务定义信息（隔离、传播、超时、只读）
	TransactionStatus 事务具体运行状态
	
如果不考虑隔离性，会引发安全问题如下:
	脏读：一个事务读取了另一个事务改写但还未提交的数据，如果这些数据被回滚，则读到的数据时无效的。
	不可重复读：在同一事务中，多次读取同一数据返回的结果有所不同。
	幻读：一个事务读取了几行记录后，另一个事务插入一些记录幻读就发生了。再后来的查询中，第一个事务就会发现有些原来没有的记录。
MySQL事务隔离级别（mysql默认的事务隔离级别为repeatable-read）SELECT @@tx_isolation;
	读未提交（read-uncommitted）
	提交读（read-committed）
	可重复读（repeatable-read）
	串行化（serializable）
传播行为：
	 如果你在你的Service层的这个方法中，除了调用了Dao层的方法之外，
	 还调用了本类的其他的Service方法，那么在调用其他的Service方法的时候，这个事务是怎么规定的呢？
	 我必须保证我在我方法里调用的这个方法与我本身的方法处在同一个事务中，否则如何保证事物的一致性？


事务管理
	声明式事务管理 		
		声明式事务管理方式一：基于TransactionProxyFactoryBean
		声明式事务管理方式二：基于AspectJ的XML方式
		声明式事务管理方式三：基于注解的方式@Transactional
	
Java事务的类型有三种：JDBC事务、JTA(Java Transaction API)事务（支持分布式事务）、容器事务
	JDBC事务建立在connection之上，即一个jdbc事务不能跨越多个数据库，而jta事务可以
	
spring中配置事务的步骤：
	1.设置数据源datasource
	2.配置平台型的事务管理器（如：DataSourceTransactionManager）
	3.声明式的管理事务（如：xml配置文件中使用tx标签配置的拦截器 或者 基于注解的方式@Transactional等等）
	
	

--------分割线--------------------------------------------------------------------------------------
Spring中事务实现的方式：（内部实现基于TransactionManager的方法）
	一、编程式事务-TransactionTemplate
	二、申明式--基于aop实现：基于注解@EnableTransactionManagement（开启AOP自动代理、添加事务需要用到的通知）、@Transactional
	
三个接口：	（Spring对事务的抽象的策略）
核心接口PlatformTransactionManager事务管理器
// 开启事务
    TransactionStatus getTransaction(TransactionDefinition definition) throws TransactionException;
	
    // 提交事务
    void commit(TransactionStatus status) throws TransactionException;
	
    // 回滚事务
    void rollback(TransactionStatus status) throws TransactionException;
————————————————
原文链接：https://blog.csdn.net/qq_41907991/article/details/107892163

DataSourceTransactionManager--doGetTransaction()方法：
DataSourceTransactionObject事务对象
ConnectionHolder数据源连接对象

事务的传播行为：PropagationRequiredService.java
	概念： 当一个事务方法A被另一个事务方法B调用时，这个事务方法A该如何进行；
	例如：methodA事务方法调用methodB事务方法时，methodB是继续在调用者methodA的事务中运行呢，
	还是为自己开启一个新事务运行，这就是由methodB的事务传播行为决定的；
	
	

