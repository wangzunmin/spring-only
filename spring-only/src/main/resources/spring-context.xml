<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">


	<!-- <context:annotation-config/> -->
  	<!-- 扫描包起始位置 -->
    <context:component-scan base-package="com.winchampion.credit.pure.circle" />
    
    <!-- 启用对Aspectj注解的支持 -->
    <!-- <aop:aspectj-autoproxy  proxy-target-class="true"/> -->

	<bean id="personFactory" class="com.winchampion.credit.pure.test.PersonFactoryBean" init-method="customOnitMethod">
		<property name="personInfo" value="tom,22"></property>
	</bean>
	
	
	
	<bean id="helloWorld" class="com.winchampion.credit.pure.test.HelloWorld"></bean>
	<alias name="helloWorld" alias="helloWorldAlias"/>

	<!-- AOP START  范例一-->
	
	<!-- 通知(Advice) 描述了切面要完成的工作和何时需要执行这个工作-->
	<bean id="aopExceptionHandler" class="com.winchampion.credit.pure.aop.AopExceptionHandler"></bean>

	<!-- 设定为自动代理 -->
	<!-- <bean id="autoProxyCreator" class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"></bean> -->
	
	<!-- 正则表达式方式 -->
	<!-- <bean id="exceptionHandlerAdvisor"  class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice">
            <ref bean="aopExceptionHandler" />
        </property>
        切入点(Pointcut) 对指定类的任何方法有效  比如com.winchampion.credit.pure.test.HelloWorld的方法
        <property name="patterns">
            <value>.*.*</value>正则表达式切点 
        </property>
    </bean> -->
    
    <!--  AspectJ表达式 方式-->
    <bean id="aspectJExpressionPointcutAdviso" class="org.springframework.aop.aspectj.AspectJExpressionPointcutAdvisor">
    	<property name="advice">
            <ref bean="aopExceptionHandler" />
        </property>
        <property name="expression" value="execution( * com.winchampion.credit.pure.test..*.*(..))"></property>
    </bean>
    
    <!-- 切面(Aspect) ：通知(Advice)和切入点(Pointcut)共同组成-->
    <!-- AOP END -->
    
    
    <!-- aop范例二 -->
	<bean id="human" class="com.winchampion.credit.pure.pointcut.Human"></bean>    
    <bean id="sleepHelper" class="com.winchampion.credit.pure.andvice.SleepHelper" />
    
    <!-- 切点表达式两种：正则表达式 和AspectJ表达式 -->
    <bean id="beforeAndAfterAdvisor"  class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice"> 
            <ref bean="sleepHelper" />
        </property>
        <!-- 切入点(Pointcut) 对指定类的任何方法有效  比如com.winchampion.credit.pure.test.HelloWorld的方法-->
        <property name="patterns">
            <value>.*sleep</value><!-- 正则表达式切点  -->
        </property>
    </bean>
    
    
   <!--  <bean id="a" class="com.winchampion.credit.pure.circle.A">
    	<property name="b" ref="b"></property>
    	<constructor-arg ref="b"></constructor-arg>
    </bean>
    <bean id="b" class="com.winchampion.credit.pure.circle.B">
    	<property name="c" ref="c"></property>
    </bean>
    <bean id="c" class="com.winchampion.credit.pure.circle.C">
    	<property name="a" ref="a"></property>
    </bean> -->
    
    <bean id="helloBeanPostProcessor" class="com.winchampion.credit.pure.processor.HelloBeanPostProcessor">
    	<property name="order" value="0"></property>
    </bean>
    
    
    <!-- 2018.9.1 aop config start-->
    <!--目标对象-->
    <bean id="boy" class="com.winchampion.credit.pure.aop.xml.Boy"></bean>
    
    <!-- advice -->
     <bean id="performAdvice" class="com.winchampion.credit.pure.aop.xml.PerformAdvice"/>
    
    <aop:config proxy-target-class="true">
    	<aop:pointcut id="pointcut" expression="execution(public * com.winchampion.credit.pure.aop.xml.Boy.sing(..))" />
        <aop:aspect ref="performAdvice">
            <aop:before method="beforePerform" pointcut-ref="pointcut"/>
            <aop:after method="afterPerform" pointcut-ref="pointcut"/>
        </aop:aspect>
    </aop:config>
	<!-- 2018.9.1 aop config end-->
	
	
	<!-- aop 事务 start -->
		<!-- <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
			<property name="dataSource" ref="datasource"></property>需要定义一个数据源
		</bean> -->
		<!-- 方式一 -->
		<!-- <tx:advice transaction-manager="transactionManager" id="transactionId">
			<tx:attributes>
				<tx:method name="" isolation="DEFAULT" propagation="REQUIRED"/>
			</tx:attributes>
		</tx:advice>
		<aop:config>
			<aop:pointcut expression="execution(public * com.winchampion.credit.pure.aop.xml.Boy.sing(..))" id="serviceMethod"/>
			<aop:advisor advice-ref="transactionId" pointcut-ref="serviceMethod"/>
		</aop:config> -->
		
		<!-- 方式二 -->
		<!-- <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/> -->
	<!-- aop 事务 end -->
</beans>